// <auto-generated />
namespace Microsoft.AspNet.Diagnostics.Entity
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNet.Diagnostics.Entity.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string ArgumentIsEmpty
        {
            get { return GetString("ArgumentIsEmpty"); }
        }

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string FormatArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// The collection argument '{argumentName}' must contain at least one element.
        /// </summary>
        internal static string CollectionArgumentIsEmpty
        {
            get { return GetString("CollectionArgumentIsEmpty"); }
        }

        /// <summary>
        /// The collection argument '{argumentName}' must contain at least one element.
        /// </summary>
        internal static string FormatCollectionArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CollectionArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// &gt; k ef migration add [migration name]
        /// </summary>
        internal static string DatabaseErrorPage_AddMigrationCommand
        {
            get { return GetString("DatabaseErrorPage_AddMigrationCommand"); }
        }

        /// <summary>
        /// &gt; k ef migration add [migration name]
        /// </summary>
        internal static string FormatDatabaseErrorPage_AddMigrationCommand()
        {
            return GetString("DatabaseErrorPage_AddMigrationCommand");
        }

        /// <summary>
        /// Apply Migrations
        /// </summary>
        internal static string DatabaseErrorPage_ApplyMigrationsButton
        {
            get { return GetString("DatabaseErrorPage_ApplyMigrationsButton"); }
        }

        /// <summary>
        /// Apply Migrations
        /// </summary>
        internal static string FormatDatabaseErrorPage_ApplyMigrationsButton()
        {
            return GetString("DatabaseErrorPage_ApplyMigrationsButton");
        }

        /// <summary>
        /// Migrations Applied
        /// </summary>
        internal static string DatabaseErrorPage_ApplyMigrationsButtonDone
        {
            get { return GetString("DatabaseErrorPage_ApplyMigrationsButtonDone"); }
        }

        /// <summary>
        /// Migrations Applied
        /// </summary>
        internal static string FormatDatabaseErrorPage_ApplyMigrationsButtonDone()
        {
            return GetString("DatabaseErrorPage_ApplyMigrationsButtonDone");
        }

        /// <summary>
        /// Applying Migrations...
        /// </summary>
        internal static string DatabaseErrorPage_ApplyMigrationsButtonRunning
        {
            get { return GetString("DatabaseErrorPage_ApplyMigrationsButtonRunning"); }
        }

        /// <summary>
        /// Applying Migrations...
        /// </summary>
        internal static string FormatDatabaseErrorPage_ApplyMigrationsButtonRunning()
        {
            return GetString("DatabaseErrorPage_ApplyMigrationsButtonRunning");
        }

        /// <summary>
        /// An error occured applying migrations, try applying them from the command line
        /// </summary>
        internal static string DatabaseErrorPage_ApplyMigrationsFailed
        {
            get { return GetString("DatabaseErrorPage_ApplyMigrationsFailed"); }
        }

        /// <summary>
        /// An error occured applying migrations, try applying them from the command line
        /// </summary>
        internal static string FormatDatabaseErrorPage_ApplyMigrationsFailed()
        {
            return GetString("DatabaseErrorPage_ApplyMigrationsFailed");
        }

        /// <summary>
        /// You can also apply migrations from the command line
        /// </summary>
        internal static string DatabaseErrorPage_HowToApplyFromCmd
        {
            get { return GetString("DatabaseErrorPage_HowToApplyFromCmd"); }
        }

        /// <summary>
        /// You can also apply migrations from the command line
        /// </summary>
        internal static string FormatDatabaseErrorPage_HowToApplyFromCmd()
        {
            return GetString("DatabaseErrorPage_HowToApplyFromCmd");
        }

        /// <summary>
        /// Try refreshing the page
        /// </summary>
        internal static string DatabaseErrorPage_MigrationsAppliedRefresh
        {
            get { return GetString("DatabaseErrorPage_MigrationsAppliedRefresh"); }
        }

        /// <summary>
        /// Try refreshing the page
        /// </summary>
        internal static string FormatDatabaseErrorPage_MigrationsAppliedRefresh()
        {
            return GetString("DatabaseErrorPage_MigrationsAppliedRefresh");
        }

        /// <summary>
        /// From the command line, scaffold a new migration and apply it to the database
        /// </summary>
        internal static string DatabaseErrorPage_NoDbOrMigrationsInfo
        {
            get { return GetString("DatabaseErrorPage_NoDbOrMigrationsInfo"); }
        }

        /// <summary>
        /// From the command line, scaffold a new migration and apply it to the database
        /// </summary>
        internal static string FormatDatabaseErrorPage_NoDbOrMigrationsInfo()
        {
            return GetString("DatabaseErrorPage_NoDbOrMigrationsInfo");
        }

        /// <summary>
        /// Use migrations to create the database for {0}
        /// </summary>
        internal static string DatabaseErrorPage_NoDbOrMigrationsTitle
        {
            get { return GetString("DatabaseErrorPage_NoDbOrMigrationsTitle"); }
        }

        /// <summary>
        /// Use migrations to create the database for {0}
        /// </summary>
        internal static string FormatDatabaseErrorPage_NoDbOrMigrationsTitle(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DatabaseErrorPage_NoDbOrMigrationsTitle"), p0);
        }

        /// <summary>
        /// Scaffold a new migration for these changes and apply them to the database from the command line
        /// </summary>
        internal static string DatabaseErrorPage_PendingChangesInfo
        {
            get { return GetString("DatabaseErrorPage_PendingChangesInfo"); }
        }

        /// <summary>
        /// Scaffold a new migration for these changes and apply them to the database from the command line
        /// </summary>
        internal static string FormatDatabaseErrorPage_PendingChangesInfo()
        {
            return GetString("DatabaseErrorPage_PendingChangesInfo");
        }

        /// <summary>
        /// There are pending model changes for {0}
        /// </summary>
        internal static string DatabaseErrorPage_PendingChangesTitle
        {
            get { return GetString("DatabaseErrorPage_PendingChangesTitle"); }
        }

        /// <summary>
        /// There are pending model changes for {0}
        /// </summary>
        internal static string FormatDatabaseErrorPage_PendingChangesTitle(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DatabaseErrorPage_PendingChangesTitle"), p0);
        }

        /// <summary>
        /// There are migrations for {0} that have not been applied to the database
        /// </summary>
        internal static string DatabaseErrorPage_PendingMigrationsInfo
        {
            get { return GetString("DatabaseErrorPage_PendingMigrationsInfo"); }
        }

        /// <summary>
        /// There are migrations for {0} that have not been applied to the database
        /// </summary>
        internal static string FormatDatabaseErrorPage_PendingMigrationsInfo(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DatabaseErrorPage_PendingMigrationsInfo"), p0);
        }

        /// <summary>
        /// Applying existing migrations for {0} may resolve this issue
        /// </summary>
        internal static string DatabaseErrorPage_Title
        {
            get { return GetString("DatabaseErrorPage_Title"); }
        }

        /// <summary>
        /// Applying existing migrations for {0} may resolve this issue
        /// </summary>
        internal static string FormatDatabaseErrorPage_Title(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DatabaseErrorPage_Title"), p0);
        }

        /// <summary>
        /// &gt; k ef migration apply
        /// </summary>
        internal static string DatabaseErrorPage_UpdateDatabaseCommand
        {
            get { return GetString("DatabaseErrorPage_UpdateDatabaseCommand"); }
        }

        /// <summary>
        /// &gt; k ef migration apply
        /// </summary>
        internal static string FormatDatabaseErrorPage_UpdateDatabaseCommand()
        {
            return GetString("DatabaseErrorPage_UpdateDatabaseCommand");
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string InvalidEnumValue
        {
            get { return GetString("InvalidEnumValue"); }
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string FormatInvalidEnumValue(object argumentName, object enumType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidEnumValue", "argumentName", "enumType"), argumentName, enumType);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
